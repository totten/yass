<?php

/*
 +--------------------------------------------------------------------+
 | YASS                                                               |
 +--------------------------------------------------------------------+
 | Copyright ARMS Software LLC (c) 2011-2012                          |
 +--------------------------------------------------------------------+
 | This file is a part of YASS.                                       |
 |                                                                    |
 | YASS is free software; you can copy, modify, and distribute it     |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | YASS is distributed in the hope that it will be useful, but        |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | Additional permissions may be granted. See LICENSE.txt for         |
 | details.                                                           |
 +--------------------------------------------------------------------+
*/

/**
 * (Hook Prototype)
 *
 * @return array(replicaName => YASS_Replica)
 * @public
 */
function hook_yass_replicas() {
}

/**
 * (Hook Prototype)
 *
 * Notify of on-going operations
 *
 * @param $event array; keys:
 *  - op: string ('preSync', 'postSync', 'preJoin', 'postJoin')
 *  - replica: YASS_Replica
 *  - master: YASS_Replica
 * @public
 */
function hook_yass_replica($event) {
}

/**
 * Implementation of hook_init
 */
function yass_init() {
  static $done = FALSE;
  if (!$done) {
    arms_util_add_classes('yass');
    $done = TRUE;
  }
}

/**
 * Implementation of hook_arms_clear
 */
function yass_arms_clear() {
  yass_init();
  require_once 'YASS/Engine.php';
  $replicaSpecs = module_invoke_all('yass_replicas');
  foreach ($replicaSpecs as $replicaSpec) {
    YASS_Engine::singleton()->updateReplicaSpec($replicaSpec);
  }
}

/**
 * Implementation of hook_perm
 */
function yass_perm() {
  return array(
    'access all replicas',
  );
}

/**
 * Implementation of hook_cron
 */
function yass_cron() {
  require_once 'YASS/LogTable.php';
  YASS_LogTable::prune();
}

/**
 * Implementation of hook_drush_command
 */
function yass_drush_command() {
  module_load_include('drush.inc', 'yass');
  $items = array();
  $items['yass-info'] = array(
    'callback' => '_yass_drush_info',
    'description' => 'Print details information about a replica. Params: <replica-name>',
  );
  $items['yass-ls'] = array(
    'callback' => '_yass_drush_ls',
    'description' => 'List available replicas',
  );
  $items['yass-rm'] = array(
    'callback' => '_yass_drush_rm',
    'description' => 'DANGEROUS. Remove a replica. Params: <replica-name>',
  );
  $items['yass-join'] = array(
    'callback' => '_yass_drush_join',
    'description' => 'DANGEROUS. Submit all data from replica to master, adding all records as new items. Params: <replica-name>',
  );
  $items['yass-hard-push'] = array(
    'callback' => '_yass_drush_hard_push',
    'description' => 'DANGEROUS. Submit all data from src-name to dest-name, overwriting discrepancies on dest-name. Use this when <dest-name> has become corrupted. Params: <src-name> <dest-name>',
  );
  $items['yass-hard-tick'] = array(
    'callback' => '_yass_drush_hard_tick',
    'description' => 'DANGEROUS. Mark all entities in a replica as newly updated. Use this when systemic problems have corrupted all other replicas. Params: <replica-name>',
  );
  return $items;
}

/**
 * Implementation of hook_yass_replicas
 *
function yass_yass_replicas() {
  return array(
    'test' => array(
      'name' => 'test',
      'datastore' => 'Memory',
      'syncstore' => 'Memory',
    ),
  );
} // */

/**
 * Implementation of hook_yass_replica
 */
function yass_yass_replica($event) {
  $func = 'on' . strtoupper($event['op']{0}) . substr($event['op'], 1);
  // Allow each replica, data store, and sync store to monitor lifecycle events
  foreach ($event['replica']->listeners as $listener) {
    $callback = array($listener, $func);
    if (is_callable($callback)) {
      switch ($func) {
        case 'onChangeId':
          call_user_func($callback, $event['replica'], $event['oldId'], $event['newId']);
          break;
        case 'onBuildFilters':
        case 'onCreateSqlProcedures':
        case 'onCreateSqlTriggers':
          if (!is_array($result)) { $result = array(); }
          $result = array_merge($result, call_user_func($callback, $event['replica']));
          break;
        case 'onPreJoin':
        case 'onPostJoin':
          call_user_func($callback, $event['replica'], $event['master']);
          break;
        case 'onPreHardPush':
        case 'onPostHardPush':
          call_user_func($callback, $event['src'], $event['replica']);
          break;
        case 'onPreSync':
        case 'onPostSync':
        default:
          call_user_func($callback, $event['replica']);
          break;
      }
    }
  }
  if (is_array($result)) {
    return $result;
  }
}

/**
 * Implementation of hook_arms_trigger
 */
function yass_arms_trigger() {
  yass_arms_clear();
  
  require_once 'YASS/Engine.php';
  $replicas = YASS_Engine::singleton()->getReplicas();
  
  $result = array();
  foreach ($replicas as $replica) {
    if ($replica->spec['is_triggered']) {
      $result = array_merge($result, module_invoke_all('yass_replica', array('replica' => $replica, 'op' => 'createSqlTriggers')));
    }
  }
  return $result;
}

/**
 * Implementation of hook_arms_procedure
 */
function yass_arms_procedure() {
  yass_arms_clear();
  
  require_once 'YASS/Engine.php';
  $replicas = YASS_Engine::singleton()->getReplicas();
  
  $result = array();
  foreach ($replicas as $replica) {
    if ($replica->spec['is_triggered']) {
      $result = array_merge($result, module_invoke_all('yass_replica', array('replica' => $replica, 'op' => 'createSqlProcedures')));
    }
  }
  return $result;
}

/**
 * hook_service implementation.
 */
function yass_service() {
  return array(
    array(
      '#method' => 'yass.getReplicas',
      '#callback' => 'yass_service_getReplicas',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#return' => 'array',
      '#help' => t('Retrieve a list of available replicas'),
    ),
    
    // DataStore methods
    
    array(
      '#method' => 'yass.getEntityTypes',
      '#callback' => 'yass_service_getEntityTypes',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Get supported entity types'),
    ),
    array(
      '#method' => 'yass.getEntities',
      '#callback' => 'yass_service_getEntities',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
        array(
          '#name' => 'entityGuids',
          '#type' => 'array',
          '#description' => t('List of entities to retrieve'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Retrieve a batch of entities'),
    ),
    array(
      '#method' => 'yass.putEntities',
      '#callback' => 'yass_service_putEntities',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
        array(
          '#name' => 'entities',
          '#type' => 'array',
          '#description' => t('List of entities to save'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Save a batch of entities'),
    ),
    
    // SyncStore methods
    
    array(
      '#method' => 'yass.validateGuids',
      '#callback' => 'yass_service_validateGuids',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Validate GUIDs'),
    ),
    array(
      '#method' => 'yass.getLastSeenVersions',
      '#callback' => 'yass_service_getLastSeenVersions',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Get list of entity-versions which have been seen [array(replicaId => YASS_Version)]'),
    ),
    array(
      '#method' => 'yass.tick',
      '#callback' => 'yass_service_tick',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
      ),
      '#return' => 'int',
      '#help' => t('Increment the built-in revision counter'),
    ),
    array(
      '#method' => 'yass.markSeens',
      '#callback' => 'yass_service_markSeens',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
        array(
          '#name' => 'versions',
          '#type' => 'array',
          '#description' => t('array(YASS_Version)'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Assert that this replica includes the data for several (replicaId,tick) pairs'),
    ),
    array(
      '#method' => 'yass.getModifieds',
      '#callback' => 'yass_service_getModifieds',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
        array(
          '#name' => 'lastSeenVersions',
          '#type' => 'array',
          '#description' => t('array(replicaId => YASS_Version)'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Find all records in a replica which have been modified since the given point [array(entityGuid => YASS_SyncState)]'),
    ),
    array(
      '#method' => 'yass.getSyncStates',
      '#callback' => 'yass_service_getSyncStates',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
        array(
          '#name' => 'entityGuids',
          '#type' => 'array',
          '#description' => t('array(entityGuid)'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Determine the sync state of a particular entity [array(entityGuid => YASS_SyncState)]'),
    ),
    array(
      '#method' => 'yass.setSyncStates',
      '#callback' => 'yass_service_setSyncStates',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
        array(
          '#name' => 'versions',
          '#type' => 'array',
          '#description' => t('array(entityGuid => YASS_Version)'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Set the sync states of several entities'),
    ),
    array(
      '#method' => 'yass.updateAllVersions',
      '#callback' => 'yass_service_updateAllVersions',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Forcibly increment the versions of entities to make the current replica appear newest'),
    ),
    array(
      '#method' => 'yass.destroy',
      '#callback' => 'yass_service_destroy',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Destroy any last-seen or sync-state data'),
    ),
    
    // GuidMapper methods
    
    array(
      '#method' => 'yass.loadGlobalIds',
      '#callback' => 'yass_service_loadGlobalIds',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
        array(
          '#name' => 'guids',
          '#type' => 'array',
          '#description' => t('array(entityGuid)'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Fetch mappings for the given GUIDs [array(array(guid =>$, entity_type=>$, lid=>$))]'),
    ),
    array(
      '#method' => 'yass.loadLocalIds',
      '#callback' => 'yass_service_loadLocalIds',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
        array(
          '#name' => 'localids',
          '#type' => 'array',
          '#description' => t('array(type => array(localId))'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Fetch mappings for the given entities/IDs [array(array(guid =>$, entity_type=>$, lid=>$))]'),
    ),
    array(
      '#method' => 'yass.addMappings',
      '#callback' => 'yass_service_addMappings',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
        array(
          '#name' => 'localids',
          '#type' => 'array',
          '#description' => t('array(type => array(localId => entityGuid))'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Add or update mappings'),
    ),
    array(
      '#method' => 'yass.destroyMappings',
      '#callback' => 'yass_service_destroyMappings',
      '#access callback' => 'user_access',
      '#access arguments' => 'access all replicas',
      '#file' => array('file' => 'service.inc', 'module' => 'yass'),
      '#args' => array(
        array(
          '#name' => 'context',
          '#type' => 'array',
          '#description' => t('Execution context -- must include proxy.replicaName, proxy.effectiveId'),
        ),
      ),
      '#return' => 'array',
      '#help' => t('Destroy any last-seen or sync-state data'),
    ),
  );
}
