<?php

/**
 * (Hook Prototype)
 *
 * @return array(replicaName => YASS_Replica)
 */
function hook_yass_replicas() {
}

/**
 * (Hook Prototype)
 *
 * Notify of on-going operations
 *
 * @param $event array; keys:
 *  - op: string ('preSync', 'postSync', 'preJoin', 'postJoin')
 *  - replica: YASS_Replica
 *  - master: YASS_Replica
 */
function hook_yass_replica($event) {
}

/**
 * Implementation of hook_init
 */
function yass_init() {
  arms_util_add_classes('yass');
}

/**
 * Implementation of hook_arms_clear
 */
function yass_arms_clear() {
  require_once 'YASS/Engine.php';
  $replicaSpecs = module_invoke_all('yass_replicas');
  foreach ($replicaSpecs as $replicaSpec) {
    YASS_Engine::singleton()->updateReplicaSpec($replicaSpec);
  }
}

/**
 * Implementation of hook_drush_command
 */
function yass_drush_command() {
  module_load_include('drush.inc', 'yass');
  $items = array();
  $items['yass-ls'] = array(
    'callback' => '_yass_drush_ls',
    'description' => 'List available replicas',
  );
  $items['yass-rm'] = array(
    'callback' => '_yass_drush_rm',
    'description' => 'DANGEROUS. Remove a replica. Params: <replica-name>',
  );
  $items['yass-join'] = array(
    'callback' => '_yass_drush_join',
    'description' => 'DANGEROUS. Submit all data from replica to master, adding all records as new items. Params: <replica-name>',
  );
  $items['yass-rejoin'] = array(
    'callback' => '_yass_drush_rejoin',
    'description' => 'DANGEROUS. Submit all data from replica to master, overwriting discrepancies in the master. Params: <replica-name>',
  );
  $items['yass-reset'] = array(
    'callback' => '_yass_drush_reset',
    'description' => 'DANGEROUS. Submit all data from master to replica, overwriting discrepancies in the replica. Params: <replica-name>',
  );
  return $items;
}

/**
 * Implementation of hook_yass_replicas
 *
function yass_yass_replicas() {
  return array(
    'test' => array(
      'name' => 'test',
      'datastore' => 'Memory',
      'syncstore' => 'Memory',
    ),
  );
} // */

/**
 * Implementation of hook_yass_replica
 */
function yass_yass_replica($event) {
  $func = 'on' . strtoupper($event['op']{0}) . substr($event['op'], 1);
  // Allow each replica, data store, and sync store to monitor lifecycle events
  foreach (array($event['replica'], $event['replica']->data, $event['replica']->sync) as $listener) {
    $callback = array($listener, $func);
    if (is_callable($callback)) {
      switch ($func) {
        case 'onChangeId':
          call_user_func($callback, $event['replica'], $event['oldId'], $event['newId']);
          break;
        case 'onPreJoin':
        case 'onPostJoin':
        case 'onPreRejoin':
        case 'onPostRejoin':
        case 'onPreReset':
        case 'onPostReset':
          call_user_func($callback, $event['replica'], $event['master']);
          break;
        case 'onPreSync':
        case 'onPostSync':
        default:
          call_user_func($callback, $event['replica']);
          break;
      }
    }
  }
}
