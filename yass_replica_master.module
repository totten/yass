<?php

/*
 +--------------------------------------------------------------------+
 | YASS                                                               |
 +--------------------------------------------------------------------+
 | Copyright ARMS Software LLC (c) 2011-2012                          |
 +--------------------------------------------------------------------+
 | This file is a part of YASS.                                       |
 |                                                                    |
 | YASS is free software; you can copy, modify, and distribute it     |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | YASS is distributed in the hope that it will be useful, but        |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | Additional permissions may be granted. See LICENSE.txt for         |
 | details.                                                           |
 +--------------------------------------------------------------------+
*/

/**
 * Implementation of hook_yass_replicas
 */
function yass_replica_master_yass_replicas() {
  return array(
    'master' => array(
      'name' => 'master',
      'datastore' => 'GenericSQL',
      'syncstore' => 'GenericSQL',
      'is_active' => TRUE,
      'is_logged' => TRUE,
      'access_control' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_yass_replica
 */
function yass_replica_master_yass_replica($event) {
  // FIXME Get entity types from schema or configuration
  $syncableEntityTypes = array( // subset of YASS_Schema_CiviCRM::getEntityTypes / YASS_Schema_CiviCRM::$_ENTITIES
    'civicrm_contact', 'civicrm_address', 'civicrm_phone', 'civicrm_email',
    // 'civicrm_activity', 'civicrm_activity_assignment', 'civicrm_activity_target',
    'yass_conflict', 'yass_mergelog',
  );
  
  if ($event['replica']->name == 'master' && $event['op'] == 'buildFilters') {
    $filters = array();
    require_once 'YASS/Filter/StdACL.php';
    $filters[] = new YASS_Filter_StdACL(array(
      'entityTypes' => $syncableEntityTypes,
      'sites' => arms_interlink_config(),
      'replicaIdsByName' => arms_util_array_combine_properties(YASS_Engine::singleton()->getReplicas(), 'name', 'id'),
      'weight' => 5,
    ));
    require_once 'YASS/Filter/MergeFields.php';
    $filters[] = new YASS_Filter_MergeFields(array(
      'entityTypes' => array('civicrm_contact'),
      'paths' => array(
        '#custom',
        '#unknown',
      ),
      'weight' => 10,
    ));
    require_once 'YASS/Filter/Archive.php';
    $filters[] = new YASS_Filter_Archive(array(
      'weight' => -999,
    ));
    return $filters;
  }
}

/**
 * Implementation of hook_drush_command
 */
function yass_replica_master_drush_command() {
  $items = array();
  $items['yass-master-restore'] = array(
    'callback' => '_yass_replica_master_restore',
    'description' => 'Restore previous versions of entities. Each parameter should take the form "<entityGuid>@<replicaId>:<tick>"',
  );
  $items['yass-master-sync'] = array(
    'callback' => '_yass_replica_master_syncall',
    'description' => 'Sync all replicas with the master',
  );
  return $items;
}

/**
 * Implementation of hook_cron
 */
function yass_replica_master_cron() {
  require_once 'YASS/Context.php';
  $ctx = new YASS_Context(array(
    '#exportable' => TRUE,
    'abortThreshold' => 5000,
  ));
  yass_arms_clear();
  _yass_replica_master_syncall();
}

function _yass_replica_master_syncall() {
  // See also: yass_ui_console's implementation of syncall
  require_once 'YASS/Engine.php';
  require_once 'YASS/ConflictResolver/Auto.php';
  $conflictResolver = new YASS_ConflictResolver_Auto(); // FIXME: Need a better policy
  YASS_Engine::singleton()->syncAll( YASS_Engine::singleton()->getReplicaByName('master'),  $conflictResolver);
}

/**
 * (Drush callback)
 *
 * Restore previous versions of entities. Each parameter should take the form "<entityGuid>@<replicaId>:<tick>"
 */
function _yass_replica_master_restore() {
  require_once 'YASS/Engine.php';
  $entityVersionCodes = func_get_args();
  $entityVersions = array();
  foreach ($entityVersionCodes as $entityVersionCode) {
    if (preg_match('/^([a-zA-Z0-9_\-]+)@([0-9]+):([0-9]+)/', $entityVersionCode, $matches)) {
      $entityVersions[ $matches[1] ] = new YASS_Version($matches[2], $matches[3]);
    } else {
      printf("Invalid version code: %s\n", $entityVersionCode);
      exit(1);
    }
  }
  require_once 'YASS/Context.php';
  $ctx = new YASS_Context(array(
    'disableAccessControl' => TRUE,
  ));
  YASS_Engine::singleton()->restore(YASS_Engine::singleton()->getReplicaByName('master'), $entityVersions);
}
