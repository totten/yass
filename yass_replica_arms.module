<?php

/*
 +--------------------------------------------------------------------+
 | YASS                                                               |
 +--------------------------------------------------------------------+
 | Copyright ARMS Software LLC (c) 2011-2012                          |
 +--------------------------------------------------------------------+
 | This file is a part of YASS.                                       |
 |                                                                    |
 | YASS is free software; you can copy, modify, and distribute it     |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | YASS is distributed in the hope that it will be useful, but        |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | Additional permissions may be granted. See LICENSE.txt for         |
 | details.                                                           |
 +--------------------------------------------------------------------+
*/

/**
 * Implementation of hook_perm
 */
function yass_replica_arms_perm() {
  return array(
    'access yass guid',
  );
}

/**
 * Implementation of hook_yass_replicas
 */
function yass_replica_arms_yass_replicas() {
  return array(
    'arms' => array(
      'name' => 'arms',
      'datastore' => 'CiviCRM',
      'syncstore' => 'CiviCRM',
      'is_active' => TRUE,
      'is_triggered' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_drush_command
 */
function yass_replica_arms_drush_command() {
  module_load_include('drush.inc', 'yass_replica_arms');
  $items = array();
  $items['yass-arms-contact'] = array(
    'callback' => '_yass_replica_arms_drush_contact',
    'description' => 'Print details information about a replica. Params: <contact-guid>',
  );
  return $items;
}

/**
 * hook_block implementation.
 * 
 * @param string $op
 * @param int    $delta
 * @param array  $edit
 * 
 * @return mixed
 */
function yass_replica_arms_block($op = 'list', $delta = 0, $edit = array ()) {
  if (!civicrm_initialize()) {
    return;
  }
  require_once 'CRM/Core/Config.php';
  $config = & CRM_Core_Config :: singleton();
  require_once 'api/v2/Group.php';

  switch ($op) {
    case 'list' :
      $blocks[0] = array (
        'info' => t('YASS: Recent Conflicts'),
      );
      return $blocks;
    case 'configure' :
      $form = array ();
      return $form;
    case 'save' :
      return;
    case 'view' :
      switch ($delta) {
        case 0 :
          if (! user_access('access CiviCRM')) { break; }
          // module_load_include('groups.inc', 'yass_replica_arms');
          
          $rows = array();
          $maxDays = 7;
          $q = pager_query(
               'SELECT cc.display_name, c.contact_id, c.win_entity, c.lose_entity, c.timestamp 
                FROM yass_conflict c
                INNER JOIN civicrm_contact cc on c.contact_id = cc.id
                WHERE c.timestamp > %d
                ORDER BY c.timestamp DESC',
                10,
                0,
                NULL,
                arms_util_time() - ($maxDays * 24 * 60 *60)
             );
             dpm(arms_util_time() - ($maxDays * 24 * 60 *60));
          while ($row = db_fetch_array($q)) {
            $rows[] = $row;
          }
          
          if (empty($rows)) break;
          
          $block['subject'] = t("Recent Conflicts");
          $block['content'] = theme('yass_replica_arms_conflicts', $rows);
          break;
      }
      return $block;
  } // switch $op
}

/**
 * hook_theme implementation
 */
function yass_replica_arms_theme() {
  return array(
    'yass_replica_arms_conflicts' => array(
      'template' => 'yass_replica_arms_conflicts',
      'arguments' => array('conflicts' => NULL),
    ),
  );
}

/**
 * Implementation of hook_civicrm_pageRun
 */
function yass_replica_arms_civicrm_pageRun(&$page) {
  if ($page instanceof CRM_Contact_Page_View_Tabbed) {
    if (!user_access('access yass guid')) return;
    
    $masterSiteId = arms_interlink_master_site();
    if (!$masterSiteId) return;
    
    require_once 'YASS/Engine.php';
    $replica = YASS_Engine::singleton()->getReplicaByName('arms');
    if (!$replica) return;
    
    $guid = check_plain($replica->mapper->toGlobal('civicrm_contact', $_REQUEST['cid']));
    if (!$guid) {
      drupal_set_message(t('Failed to determine contact GUID'), 'warning');
      return;
    }
    
    $page->assign('contactGuid', $guid);
    $page->assign('contactGuidUrl', arms_interlink_url(arms_interlink_get($masterSiteId), "yass/entity/master/$guid"));
  } elseif ($page instanceof CRM_Contact_Page_View_Log) {
    $vars =& $page->getTemplate()->get_template_vars();
    if (!is_numeric($vars['contactId'])) {
      drupal_set_message(t('Failed to lookup conflicts -- missing contactId'), 'warning');
    } else {
      $page->assign('conflicts', _yass_replica_arms_getConflicts($vars['contactId']));
      
      arms_util_add_templates('yass_replica_arms');
      require_once 'CRM/Core/Region.php';
      CRM_Core_Region::instance('crm-contact-page-view-log-table')->add(array( // crm-contact-page-view-log-table page-body
        'weight' => '5',
        'template' => 'YASS/Contact/Page/Conflicts.tpl',
      ));
    }
  }
}

function _yass_replica_arms_getConflicts($contactId) {
  arms_util_include_api('array');
  $conflicts = array();
  $q = db_query('
    SELECT id, entity_id, win_replica_id, win_tick, win_entity, lose_replica_id, lose_tick, lose_entity, timestamp 
    FROM {yass_conflict}
    WHERE contact_id = %d
    ORDER BY timestamp desc
  ', $contactId);
  while ($row = db_fetch_array($q)) {
    $row['win_entity'] = unserialize($row['win_entity']);
    $row['lose_entity'] = unserialize($row['lose_entity']);
    $row['diff'] = arms_util_array_rdiff('.', $row['win_entity'], $row['lose_entity']);
    $conflicts[] = $row;
  }
  return $conflicts;
}
