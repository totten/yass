<?php

/**
 * Implementation of hook_perm
 */
function yass_replica_arms_perm() {
  return array(
    'access yass guid',
  );
}

/**
 * Implementation of hook_yass_replicas
 */
function yass_replica_arms_yass_replicas() {
  return array(
    'arms' => array(
      'name' => 'arms',
      'datastore' => 'ARMS',
      'syncstore' => 'ARMS',
      'is_active' => TRUE,
      'is_triggered' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_drush_command
 */
function yass_replica_arms_drush_command() {
  module_load_include('drush.inc', 'yass_replica_arms');
  $items = array();
  $items['yass-arms-contact'] = array(
    'callback' => '_yass_replica_arms_drush_contact',
    'description' => 'Print details information about a replica. Params: <contact-guid>',
  );
  return $items;
}

/**
 * Implementation of hook_civicrm_pageRun
 */
function yass_replica_arms_civicrm_pageRun(&$page) {
  if ($page instanceof CRM_Contact_Page_View_Tabbed) {
    if (!user_access('access yass guid')) return;
    
    $masterSiteId = arms_interlink_master_site();
    if (!$masterSiteId) return;
    
    require_once 'YASS/Engine.php';
    $replica = YASS_Engine::singleton()->getReplicaByName('arms');
    if (!$replica) return;
    
    $guid = check_plain($replica->mapper->toGlobal('civicrm_contact', $_REQUEST['cid']));
    if (!$guid) {
      drupal_set_message(t('Failed to determine contact GUID'), 'warning');
      return;
    }
    
    $page->assign('contactGuid', $guid);
    $page->assign('contactGuidUrl', arms_interlink_url(arms_interlink_get($masterSiteId), "yass/entity/master/$guid"));
  }
}
