<?php

/**
 * Test synchronization service
 * 
 * Dependencies:
 * Drupal-SimpleTest 1.x
 */ 

require_once 'YASS/Test.php';

class YASS_Replica_ARMS_Test extends YASS_Test {
  function get_info() {
    return array(
      'name' => t('YASS Replica (ARMS)'),
      'desc' => 'Test the local ARMS-based replica',
      'group' => 'YASS'
    );
  }
  
  function setUp() {
    parent::setUp();
    // module_load_include('inc', 'yass');
    require_once 'YASS/Engine.php';
    arms_util_include_api('array');
    arms_util_include_api('trigger');
    civicrm_initialize();
    require_once 'api/v2/Contact.php';
  }

  function testJoin() {
    // add some data before configuring the replicas
    arms_util_trigger_rebuild();
    $alice = $this->createIndividual(array(
      'first_name' => 'Alice',
      'last_name' => 'Aller',
      'gender' => 'Female',
      'individual_prefix' => 'Dr',
      'individual_suffix' => 'III',
    ));
    $call = $this->createActivity(array(
      'activity_type_id' => arms_util_activity_type('Phone Call'),
      'activity_date_time' => '20110909090900',
      'source_contact_id' => $alice['contact_id'],
      'target_contact_id' => array($alice['contact_id']),
      'duration' => 15,
    ));
    $this->assertSql(0, 'select count(*) from {yass_syncstore_seen}');
    $this->assertSql(0, 'select count(*) from {yass_guidmap}');
    
    // add the replica
    $master = $this->createReplica(array('name' => 'master', 'datastore' => 'GenericSQL', 'syncstore' => 'GenericSQL', 'is_active' => TRUE));
    $local = $this->createReplica(array('name' => 'arms', 'datastore' => 'ARMS', 'syncstore' => 'ARMS', 'is_active' => TRUE));
    YASS_Engine::singleton()->join($local, $master);
    $this->assertConsistency($local, $master, YASS_SyncStore_ARMS::$ENTITIES, array(), array());
    $aliceGuid = $local->mapper->toGlobal('civicrm_contact', $alice['contact_id']);
    $this->assertEqual('civicrm_contact', $master->data->getEntity($aliceGuid)->entityType);
    $this->assertEqual('Dr Alice Aller III', $master->data->getEntity($aliceGuid)->data['display_name']);
    $this->assertEqual('Female', $master->data->getEntity($aliceGuid)->data['gender_id']);
    $this->assertEqual('Dr', $master->data->getEntity($aliceGuid)->data['prefix_id']);
    $this->assertEqual('III', $master->data->getEntity($aliceGuid)->data['suffix_id']);
    $callGuid = $local->mapper->toGlobal('civicrm_activity', $call['id']);
    $this->assertEqual('civicrm_activity', $master->data->getEntity($callGuid)->entityType);
    $this->assertEqual('15', $master->data->getEntity($callGuid)->data['duration']);

    // add entity to local replica
    $bob = $this->createIndividual(array(
      'first_name' => 'Bob',
      'last_name' => 'Roberts',
    ));
    $bobGuid = $local->mapper->toGlobal('civicrm_contact', $bob['contact_id']);
    $charlie = $this->createIndividual(array(
      'first_name' => 'Charlie',
      'last_name' => 'Charleston',
    ));
    $charlieGuid = $local->mapper->toGlobal('civicrm_contact', $charlie['contact_id']);
    $meeting = $this->createActivity(array(
      'activity_type_id' => arms_util_activity_type('Meeting'),
      'activity_date_time' => '20111010101000',
      'source_contact_id' => $alice['contact_id'],
      'target_contact_id' => array($bob['contact_id']),
      'duration' => 45,
    ));
    $meetingGuid = $local->mapper->toGlobal('civicrm_activity', $meeting['id']);
    $this->assertConsistency($local, $master, array('civicrm_activity','civicrm_contact'), array($bobGuid,$charlieGuid,$meetingGuid), array());
    
    // sync to master
    YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
    $entities = $master->data->getEntities(array($aliceGuid,$bobGuid,$charlieGuid,$meetingGuid));
    $this->assertEqual('civicrm_contact', $entities[$bobGuid]->entityType);
    $this->assertEqual('Dr Alice Aller III', $entities[$aliceGuid]->data['display_name']);
    $this->assertEqual('Bob Roberts', $entities[$bobGuid]->data['display_name']);
    $this->assertEqual('Charlie Charleston', $entities[$charlieGuid]->data['display_name']);
    $this->assertEqual('civicrm_activity', $entities[$meetingGuid]->entityType);
    $this->assertEqual('45', $entities[$meetingGuid]->data['duration']);
    $this->assertEqual('Meeting', $entities[$meetingGuid]->data['activity_type_id']);
    
    // modify master
    $newBob = $entities[$bobGuid]->data;
    $newBob['first_name'] = 'Robert';
    $newBob['display_name'] = 'Robert Roberts';
    $carol = array(
            'contact_type' => 'Individual',
            'sort_name' => 'Carolson, Carol',
            'display_name' => 'Carol Carolson',
            'preferred_mail_format' => 'Both',
            'first_name' => 'Carol',
            'last_name' => 'Carolson',
    );
    $carolGuid = YASS_Engine::singleton()->createGuid();
    $this->updateEntities($master, array(
      array('guid' => $bobGuid, 'type' => 'civicrm_contact', 'data' => $newBob),
      array('guid' => $carolGuid, 'type' => 'civicrm_contact', 'data' => $carol),
    ));
    $this->assertConsistency($local, $master, 'civicrm_contact', array(), array($bobGuid,$carolGuid));
    
    // sync to local
    YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
    $this->assertSql('Robert Roberts', 'select display_name from {civicrm_contact} where id = %d', $bob['contact_id']);
    $this->assertSql('Carol Carolson', 'select display_name from {civicrm_contact} c
      left join {yass_guidmap} map on (map.replica_id=%d AND map.entity_type="civicrm_contact" AND map.lid=c.id)
      where map.guid="%s"', $local->id, $carolGuid);
  }
  
  /**
   * Assert that the $local and $master have the same sync state (for given entity $types) -- with the
   * exception of $modifiedLocalGuids and $modifiedMasterGuids
   */
  function assertConsistency(YASS_Replica $local, YASS_Replica $master, $types, $modifiedLocalGuids = array(), $modifiedMasterGuids = array()) {
    if (!is_array($types)) {
      $types = array($types);
    }
    if (!is_array($modifiedLocalGuids)) {
      $modifiedLocalGuids = array($modifiedLocalGuids);
    }
    if (!is_array($modifiedMasterGuids)) {
      $modifiedMasterGuids = array($modifiedMasterGuids);
    }
    
    $this->assertLocalConsistency($local);
    $this->assertFalse(empty($types));
    $this->assertMutualConsistency($local, $master, $types, array_merge($modifiedLocalGuids, $modifiedMasterGuids));
    $this->assertModified($local, $master, $types, $modifiedLocalGuids);
    $this->assertModified($master, $local, $types, $modifiedMasterGuids);
  }
  
  /**
   * Assert that all local entities have a guid and syncstate
   */
  function assertLocalConsistency(YASS_Replica $local) {
    $totalEntities = 0;
    foreach (YASS_SyncStore_ARMS::$ENTITIES as $type) {
      $entities = db_result(db_query("select count(*) from ${type}"));
      $guidMaps = db_result(db_query('select count(*) from {yass_guidmap} where replica_id=%d and entity_type = "%s"', $local->id, $type));
      $matches = db_result(db_query("select count(*) from ${type} entity inner join {yass_guidmap} map on (map.replica_id=%d AND map.entity_type='%s' and map.lid=entity.id)",
        $local->id, $type));
      $this->assertEqual($entities, $guidMaps);
      $this->assertEqual($entities, $matches);
      
      $totalEntities += $entities;
    }
    $this->assertSql($totalEntities, 'select count(*) from {yass_guidmap} where replica_id=%d', $local->id);
    $this->assertSql($totalEntities, 'select count(*) from {yass_syncstore_state} where replica_id=%d', $local->id);
    
    $localLastSeens = $local->sync->getLastSeenVersions();
    foreach ($localLastSeens as $version) {
      $maxActiveTick = db_result(db_query(
        'select max(u_tick) from {yass_syncstore_state} where replica_id=%d and u_replica_id=%d', $local->id, $version->replicaId
      ));
      $this->assertTrue($version->tick >= $maxActiveTick);
    }
  }
  
  /**
   * Assert that $guids are the only modifications on $src expected by $dest of type $filterTypes 
   *
   * @param $filterTypes array(string)
   * @param $expectedGuids array(string)
   */
  function assertModified(YASS_Replica $src, YASS_Replica $dest, $filterTypes, $expectedGuids) {
  
    // find modifications
    $srcLastSeenVersions = $src->sync->getLastSeenVersions();    // array(replicaId => YASS_Version)
    $destLastSeenVersions = $dest->sync->getLastSeenVersions(); // array(replicaId => YASS_Version)
    $srcChanges = array();  // array(entityGuid => YASS_SyncState)
    foreach ($srcLastSeenVersions as $replicaId => $srcVersion) {
      $destVersion = $destLastSeenVersions[$replicaId] ? $destLastSeenVersions[$replicaId] : new YASS_Version($replicaId, 0);
      $srcChanges += $src->sync->getModified($destVersion);
    }
    
    // filter by type
    $entitiesByType = arms_util_array_index(array('entityType','entityGuid'), $src->data->getEntities(array_keys($srcChanges)));
    $actualGuids = array();
    foreach ($filterTypes as $filterType) {
      if (is_array($entitiesByType[$filterType])) {
        $actualGuids = array_merge($actualGuids, array_keys($entitiesByType[$filterType]));
      }
    }
    
    // compare
    $expectedGuidList = '';
    foreach ($expectedGuids as $key => $value) { $expectedGuidList .= '<'.$key.'>'.$value.' '; }
    sort($actualGuids);
    sort($expectedGuids);
    $this->assertEqual($expectedGuids, $actualGuids,
      sprintf("assertModified(%s,%s): expected=[%s] actual=[%s]",
        $src->name,
        $dest->name,
        $expectedGuidList,
        implode(' ', $actualGuids)
      )
    );
  }
  
  /**
   * Assert that all entities of type $types on the local and master replicas are consistent,
   * not-with-standing the enumerated inconsistencies.
   *
   * @param $types array(entityType) the types for which we want to check consistency
   * @param $inconsistencies array(entityGuid) the entities which may be inconsistent
   */
  function assertMutualConsistency(YASS_Replica $local, YASS_Replica $master, $types, $inconsistencies) {
    $localQuery = arms_util_query('yass_syncstore_state state')
      ->addJoinf('INNER JOIN yass_guidmap map on (map.replica_id = %d AND state.entity_id = map.guid)', $local->id)
      ->addWhere(arms_util_query_in('map.entity_type', $types))
      ->addWhere(arms_util_query_not_in('state.entity_id', $inconsistencies))
      ->addWheref('state.replica_id=%d', $local->id);
    $localSyncStates = db_result(db_query($localQuery->toCountSQL()));
    
    $masterQuery = arms_util_query('yass_syncstore_state state')
      ->addJoinf('INNER JOIN yass_guidmap map on (map.replica_id = %d AND state.entity_id = map.guid)', $local->id) // TODO hrm
      ->addWhere(arms_util_query_in('map.entity_type', $types))
      ->addWhere(arms_util_query_not_in('state.entity_id', $inconsistencies))
      ->addWheref('state.replica_id=%d', $master->id);
    $masterSyncStates = db_result(db_query($masterQuery->toCountSQL()));
    
    $matchQuery =  arms_util_query('yass_syncstore_state local')
      ->addJoin('INNER JOIN yass_guidmap map on (map.replica_id = local.replica_id AND local.entity_id = map.guid)')
      ->addWhere(arms_util_query_in('map.entity_type', $types))
      ->addJoin('INNER JOIN yass_syncstore_state master on local.entity_id = master.entity_id')
      ->addWhere(arms_util_query_not_in('local.entity_id', $inconsistencies))
      ->addWhere(arms_util_query_not_in('master.entity_id', $inconsistencies))
      ->addWheref('local.replica_id=%d', $local->id)
      ->addWheref('master.replica_id=%d', $master->id)
      ->addWhere('local.u_replica_id = master.u_replica_id')
      ->addWhere('local.u_tick = master.u_tick')
      ->addWhere('local.c_replica_id = master.c_replica_id')
      ->addWhere('local.c_tick = master.c_tick')
      ;
    $matchSyncStates = db_result(db_query($matchQuery->toCountSQL()));
    
    $this->assertEqual($localSyncStates, $matchSyncStates, sprintf('assertMutualConsistency(%s,%s): local=%d match=%d', $local->name, $master->name, $localSyncStates, $matchSyncStates));
    $this->assertEqual($masterSyncStates, $matchSyncStates, sprintf('assertMutualConsistency(%s,%s): master=%d match=%d', $local->name, $master->name, $masterSyncStates, $matchSyncStates));
  }
}
