<?php

/*
 +--------------------------------------------------------------------+
 | YASS                                                               |
 +--------------------------------------------------------------------+
 | Copyright ARMS Software LLC (c) 2011-2012                          |
 +--------------------------------------------------------------------+
 | This file is a part of YASS.                                       |
 |                                                                    |
 | YASS is free software; you can copy, modify, and distribute it     |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | YASS is distributed in the hope that it will be useful, but        |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | Additional permissions may be granted. See LICENSE.txt for         |
 | details.                                                           |
 +--------------------------------------------------------------------+
*/

/**
 * Test synchronization service
 * 
 * Dependencies:
 * Drupal-SimpleTest 1.x
 */ 

require_once 'YASS/Test.php';

class YASS_Filter_SQLMap_Test extends YASS_Test {
    function get_info() {
        return array(
            'name' => t('YASS Filter (SQLMap)'),
            'desc' => 'Test the conversion between option-value numbers and names',
            'group' => 'YASS'
        );
    }
    
    function setUp() {
        parent::setUp();
        // module_load_include('inc', 'yass');
        require_once 'YASS/Filter/SQLMap.php';
        $this->master = $this->createReplica(array('name' => 'master', 'type' => 'CiviCRMMaster', 'is_active' => TRUE));
        $this->local = $this->createReplica(array('name' => 'arms', 'type' => 'CiviCRM', 'is_active' => TRUE));
        $this->stateFilter = new YASS_Filter_SQLMap(array(
            'entityType' => 'civicrm_address',
            'field' => 'state_province_id',
            'sql' => 'select sp.id local, concat(c.iso_code,":",sp.abbreviation) global 
                from civicrm_country c 
                inner join civicrm_state_province sp on c.id = sp.country_id',
        ));
        $this->stateFilterMultiple = new YASS_Filter_SQLMap(array(
            'entityType' => 'civicrm_address',
            'field' => 'state_province_id',
            'sql' => 'select sp.id local, concat(c.iso_code,":",sp.abbreviation) global 
                from civicrm_country c 
                inner join civicrm_state_province sp on c.id = sp.country_id',
            'isMultiple' => TRUE,
        ));
    }
    
    function testToGlobal() {
        $activities = array(
            new YASS_Entity('asdf', 'civicrm_address', array(
                'state_province_id' => 1024,
                'irrelevant' => 1024,
            )),
            new YASS_Entity('asdf', 'civicrm_address', array(
                'state_province_id' => FALSE,
                'irrelevant' => FALSE,
            )),
            new YASS_Entity('fdsa', 'irrelevant', array(
                'state_province_id' => 1024,
                'irrelevant' => 1024,
            )),
        );
        $this->stateFilter->toGlobal($activities, $this->local);
        $this->assertEqual('US:MO', $activities[0]->data['state_province_id']);
        $this->assertEqual(1024, $activities[0]->data['irrelevant']);
        $this->assertEqual(FALSE, $activities[1]->data['state_province_id']);
        $this->assertEqual(1024, $activities[2]->data['state_province_id']);
    }
    
    function testToLocal() {
        $activities = array(
            new YASS_Entity('asdf', 'civicrm_address', array(
                'state_province_id' => 'US:MO',
                'irrelevant' => 'US:MO',
            )),
            new YASS_Entity('fdsa', 'irrelevant', array(
                'state_province_id' => 'US:MO',
                'irrelevant' => 'US:MO',
            )),
        );
        $this->stateFilter->toLocal($activities, $this->local);
        $this->assertEqual(1024, $activities[0]->data['state_province_id']);
        $this->assertEqual('US:MO', $activities[0]->data['irrelevant']);
        $this->assertEqual('US:MO', $activities[1]->data['state_province_id']);
    }
    
    function testToGlobalException() {
        $activities = array(
            new YASS_Entity('asdf', 'civicrm_address', array(
                'state_province_id' => -123,
                'irrelevant' => 1024
            )),
        );
        try {
            $this->stateFilter->toGlobal($activities, $this->local);
            $this->fail('Expected exception');
        } catch (Exception $e) {
            $this->pass();
        }
    }
    
    function testToLocalException() {
        $activities = array(
            new YASS_Entity('asdf', 'civicrm_address', array(
                'state_province_id' => 'Fantasia',
                'irrelevant' => 'US:MO',
            )),
        );
        try {
            $this->stateFilter->toLocal($activities, $this->local);
            $this->fail('Expected exception');
        } catch (Exception $e) {
            $this->pass();
        }
    }
    
    function testToGlobalMultiple() {
        $activities = array(
            new YASS_Entity('asdf', 'civicrm_address', array(
                'state_province_id' => array(2567, 1644),
                'irrelevant' => array(2567, 1644),
            )),
            new YASS_Entity('asdf', 'civicrm_address', array(
                'state_province_id' => array(),
                'irrelevant' => FALSE,
            )),
            new YASS_Entity('fdsa', 'irrelevant', array(
                'state_province_id' => array(2567, 1644),
                'irrelevant' => array(2567, 1644),
            )),
        );
        $this->stateFilterMultiple->toGlobal($activities, $this->local);
        $this->assertEqual(array('FR:75', 'AU:VIC'), $activities[0]->data['state_province_id']);
        $this->assertEqual(array(2567, 1644), $activities[0]->data['irrelevant']);
        $this->assertEqual(array(), $activities[1]->data['state_province_id']);
        $this->assertEqual(array(2567, 1644), $activities[2]->data['state_province_id']);
    }
    
    function testToLocalMultiple() {
        $activities = array(
            new YASS_Entity('asdf', 'civicrm_address', array(
                'state_province_id' => array('FR:75', 'AU:VIC'),
                'irrelevant' => array('FR:75', 'AU:VIC'),
            )),
            new YASS_Entity('fdsa', 'irrelevant', array(
                'state_province_id' => array('FR:75', 'AU:VIC'),
                'irrelevant' => array('FR:75', 'AU:VIC'),
            )),
        );
        $this->stateFilterMultiple->toLocal($activities, $this->local);
        $this->assertEqual(array(2567, 1644), $activities[0]->data['state_province_id']);
        $this->assertEqual(array('FR:75', 'AU:VIC'), $activities[0]->data['irrelevant']);
        $this->assertEqual(array('FR:75', 'AU:VIC'), $activities[1]->data['state_province_id']);
    }

}
