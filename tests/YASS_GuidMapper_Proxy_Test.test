<?php

/*
 +--------------------------------------------------------------------+
 | YASS                                                               |
 +--------------------------------------------------------------------+
 | Copyright ARMS Software LLC (c) 2011-2012                          |
 +--------------------------------------------------------------------+
 | This file is a part of YASS.                                       |
 |                                                                    |
 | YASS is free software; you can copy, modify, and distribute it     |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | YASS is distributed in the hope that it will be useful, but        |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | Additional permissions may be granted. See LICENSE.txt for         |
 | details.                                                           |
 +--------------------------------------------------------------------+
*/

/**
 * Test synchronization service
 * 
 * Dependencies:
 * Drupal-SimpleTest 1.x
 */ 

require_once 'YASS/Test.php';
require_once 'tests/YASS_GuidMapper_Test.test';

class YASS_GuidMapper_Proxy_Test extends YASS_GuidMapper_Test {
    function get_info() {
        return array(
            'name' => t('YASS GuidMapper (Proxy)'),
            'desc' => 'Test the GUID mapper (via proxy)',
            'group' => 'YASS'
        );
    }

    function _createReplicas() {
        $localA = $this->createReplica(array('name' => 'localA', 'datastore' => 'GenericSQL', 'syncstore' => 'GenericSQL', 'is_active' => FALSE, 'is_triggered' => TRUE));
        $remoteA = $this->createReplica(array('name' => 'remoteA', 'type' => 'CiviCRMProxy', 'is_active' => TRUE, 'remoteSite' => '#local', 'remoteReplica' => 'localA'));
        $localB = $this->createReplica(array('name' => 'localB', 'datastore' => 'GenericSQL', 'syncstore' => 'GenericSQL', 'is_active' => FALSE, 'is_triggered' => TRUE));
        $remoteB = $this->createReplica(array('name' => 'remoteB', 'type' => 'CiviCRMProxy', 'is_active' => TRUE, 'remoteSite' => '#local', 'remoteReplica' => 'localB'));
        $this->assertTrue($remoteA->mapper instanceof YASS_GuidMapper_Proxy);
        $this->assertTrue($remoteB->mapper instanceof YASS_GuidMapper_Proxy);
        
        return array(
            $remoteA,
            $remoteB,
        );
    }
    
    function _recreateReplicas() {
        $engine = YASS_Engine::singleton(TRUE);
        return array(
            $engine->getReplicaByName('remoteA'),
            $engine->getReplicaByName('remoteB'),
        );
    }
    
}