<?php

/**
 * Test synchronization service
 * 
 * Dependencies:
 * Drupal-SimpleTest 1.x
 */ 

require_once 'YASS/Test.php';

class YASS_Algorithm_Bidir_Test extends YASS_Test {
  function get_info() {
    return array(
      'name' => t('YASS Bidir Algorithm'),
      'desc' => 'Test the synchronization engine',
      'group' => 'YASS'
    );
  }
  
  function setUp() {
    parent::setUp();
    require_once 'YASS/Engine.php';
  }
  
  function testNewLeftToRight() {
    $left = new YASS_Replica_Dummy(array('name' => 'testNewLeftToRight_Left'));
    $right = new YASS_Replica_Dummy(array('name' => 'testNewLeftToRight_Right'));
    YASS_Engine::bidir($left, $right, new YASS_ConflictResolver_Exception());
    
    $this->assertSyncState($left, 'contact', '1234', FALSE, FALSE, FALSE);
    $this->assertSyncState($right, 'contact', '1234', FALSE, FALSE, FALSE);
    
    $left->set(array(
      array('contact',  '1234', 'one'),
      array('activity', '2345', 'two'),
      array('contact',  '3456', 'three'),
    ));
    $this->assertSyncState($left, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($left, 'activity', '2345', $left->id, '2', 'two');
    $this->assertSyncState($left, 'contact', '3456', $left->id, '3', 'three');
    $this->assertSyncState($right, 'contact', '1234', FALSE, FALSE, FALSE);
    $this->assertSyncState($right, 'activity', '2345', FALSE, FALSE, FALSE);
    $this->assertSyncState($right, 'contact', '3456', FALSE, FALSE, FALSE);
    
    YASS_Engine::bidir($left, $right, new YASS_ConflictResolver_Exception());
    $this->assertSyncState($left, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($left, 'activity', '2345', $left->id, '2', 'two');
    $this->assertSyncState($left, 'contact', '3456', $left->id, '3', 'three');
    $this->assertSyncState($right, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($right, 'activity', '2345', $left->id, '2', 'two');
    $this->assertSyncState($right, 'contact', '3456', $left->id, '3', 'three');
  }

  function testNewBidir() {
    $left = new YASS_Replica_Dummy(array('name' => 'testNewBidir_Left'));
    $right = new YASS_Replica_Dummy(array('name' => 'testNewBidir_Right'));
    YASS_Engine::bidir($left, $right, new YASS_ConflictResolver_Exception());
    
    $this->assertSyncState($right, 'contact', '1234', FALSE, FALSE, FALSE);
    $this->assertSyncState($left, 'contact', '1234', FALSE, FALSE, FALSE);
    
    $left->set(array(
      array('contact',  '1234', 'one'),
      array('activity', '2345', 'two'),
    ));
    $right->set(array(
      array('contact',  '3456', 'three'),
    ));
    $this->assertSyncState($left, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($left, 'activity', '2345', $left->id, '2', 'two');
    $this->assertSyncState($left, 'contact', '3456', FALSE, FALSE, FALSE);
    $this->assertSyncState($right, 'contact', '1234', FALSE, FALSE, FALSE);
    $this->assertSyncState($right, 'activity', '2345', FALSE, FALSE, FALSE);
    $this->assertSyncState($right, 'contact', '3456', $right->id, '1', 'three');
    
    YASS_Engine::bidir($left, $right, new YASS_ConflictResolver_Exception());
    $this->assertSyncState($left, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($left, 'activity', '2345', $left->id, '2', 'two');
    $this->assertSyncState($left, 'contact', '3456', $right->id, '1', 'three');
    $this->assertSyncState($right, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($right, 'activity', '2345', $left->id, '2', 'two');
    $this->assertSyncState($right, 'contact', '3456', $right->id, '1', 'three');
  }
  
  function testConflictSrcWins() {
    $left = new YASS_Replica_Dummy(array('name' => 'testConflictSrcWins_Left'));
    $right = new YASS_Replica_Dummy(array('name' => 'testConflictSrcWins_Right'));
    
    $left->set(array(
      array('contact',  '1234', 'one'),
      array('activity', '2345', 'two'),
      array('contact',  '3456', 'three'),
    ));
    YASS_Engine::bidir($left, $right, new YASS_ConflictResolver_Exception());
    $this->assertSyncState($left, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($left, 'activity', '2345', $left->id, '2', 'two');
    $this->assertSyncState($left, 'contact', '3456', $left->id, '3', 'three');
    $this->assertSyncState($right, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($right, 'activity', '2345', $left->id, '2', 'two');
    $this->assertSyncState($right, 'contact', '3456', $left->id, '3', 'three');
    
    $left->set(array(
      array('activity', '2345', 'two and a half'),
    ));
    $right->set(array(
      array('activity', '2345', 'two point five'),
    ));
    $this->assertSyncState($left, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($left, 'activity', '2345', $left->id, '4', 'two and a half');
    $this->assertSyncState($left, 'contact', '3456', $left->id, '3', 'three');
    $this->assertSyncState($right, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($right, 'activity', '2345', $right->id, '1', 'two point five');
    $this->assertSyncState($right, 'contact', '3456', $left->id, '3', 'three');
    
    YASS_Engine::bidir($left, $right, new YASS_ConflictResolver_SrcWins());
    $this->assertSyncState($left, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($left, 'activity', '2345', $left->id, '4', 'two and a half');
    $this->assertSyncState($left, 'contact', '3456', $left->id, '3', 'three');
    $this->assertSyncState($right, 'contact', '1234', $left->id, '1', 'one');
    $this->assertSyncState($right, 'activity', '2345', $left->id, '4', 'two and a half');
    $this->assertSyncState($right, 'contact', '3456', $left->id, '3', 'three');
  }

  function testLaggyThreeWayConflict() {
    $rabbit = new YASS_Replica_Dummy(array('name' => 'testLaggyThreeWay_Rabbit'));
    $monkey = new YASS_Replica_Dummy(array('name' => 'testLaggyThreeWay_Monkey'));
    $turtle = new YASS_Replica_Dummy(array('name' => 'testLaggyThreeWay_Turtle'));

    // rabbit => monkey, turtle
    $rabbit->set(array(
      array('contact',  '1234', 'aaa'),
    ));
    YASS_Engine::bidir($rabbit, $monkey, new YASS_ConflictResolver_Exception());
    YASS_Engine::bidir($rabbit, $turtle, new YASS_ConflictResolver_Exception());
    $this->assertSyncState($rabbit, 'contact', '1234', $rabbit->id, '1', 'aaa');
    $this->assertSyncState($monkey, 'contact', '1234', $rabbit->id, '1', 'aaa');
    $this->assertSyncState($turtle, 'contact', '1234', $rabbit->id, '1', 'aaa');
    
    // rabbit => monkey; !turtle
    $rabbit->set(array(
      array('contact',  '1234', 'aaabbb'),
    ));
    YASS_Engine::bidir($rabbit, $monkey, new YASS_ConflictResolver_Exception());
    $this->assertSyncState($rabbit, 'contact', '1234', $rabbit->id, '2', 'aaabbb');
    $this->assertSyncState($monkey, 'contact', '1234', $rabbit->id, '2', 'aaabbb');
    $this->assertSyncState($turtle, 'contact', '1234', $rabbit->id, '1', 'aaa');

    // monkey => turtle, !rabbit
    $monkey->set(array(
      array('contact',  '1234', 'aaabbbccc'),
    ));
    YASS_Engine::bidir($monkey, $turtle, new YASS_ConflictResolver_Exception());
    $this->assertSyncState($rabbit, 'contact', '1234', $rabbit->id, '2', 'aaabbb');
    $this->assertSyncState($monkey, 'contact', '1234', $monkey->id, '1', 'aaabbbccc');
    $this->assertSyncState($turtle, 'contact', '1234', $monkey->id, '1', 'aaabbbccc');

    // rabbit => turtle, !monkey
    $rabbit->set(array(
      array('contact',  '1234', 'aaabbbcccddd'),
    ));
    try {
      YASS_Engine::bidir($rabbit, $turtle, new YASS_ConflictResolver_Exception());
      $this->fail('Expected conflict');
    } catch (Exception $e) {
      // $this->assertSyncState($rabbit, 'contact', '1234', $rabbit->id,    '3', 'aaabbbcccddd');
      // $this->assertSyncState($monkey, 'contact', '1234', $monkey->id,    '1', 'aaabbbccc');
      // $this->assertSyncState($turtle, 'contact', '1234', $rabbit->id,    '3', 'aaabbbcccddd');
    }
  }
  
  function testSentences() {
    foreach (array('Memory', 'GenericSQL') as $datastore) {
      foreach (array('Memory', 'GenericSQL') as $syncstore) {
        $this->_replicaDefaults = array('datastore' => $datastore, 'syncstore' => $syncstore);
        $this->_runSentenceTest('r1:add:a r1:sync r2:sync r1:modify:a r2:modify:a r1:modify:a r2:modify:a r1:sync r2:sync:SrcWins',	array('a'=>'a.2 from r2'));
        $this->_runSentenceTest('r1:add:a r1:sync r2:sync r3:sync r2:modify:a r3:modify:a r3:sync r2:sync:SrcWins r1:sync',		array('a'=>'a.1 from r2'));
        $this->_runSentenceTest('r1:add:a r1:sync r2:sync r3:sync r2:modify:a r3:modify:a r3:sync r2:sync:DstWins r1:sync',		array('a'=>'a.1 from r3'));
        $this->_runSentenceTest('r1:add:a r1:sync r2:sync r1:sync r1:modify:a r1:sync r2:modify:a r1:sync r2:sync:SrcWins',		array('a'=>'a.1 from r2'));
        $this->_runSentenceTest('r1:add:a r1:sync r2:sync r1:sync r1:modify:a r1:sync r2:modify:a r1:sync r2:sync:DstWins',		array('a'=>'a.2 from r1'));
        $this->_runSentenceTest('r1:add:a r1:sync r1:modify:a r2:sync r1:sync r2:sync r2:modify:a r2:sync r1:sync',			array('a'=>'a.1 from r2'));
        $this->_runSentenceTest('r1:add:a r1:sync r1:modify:a r2:sync r2:modify:a r1:sync r2:modify:a r2:sync:SrcWins r1:sync',		array('a'=>'a.2 from r2'));
    
        $this->_runSentenceTest('r1:add:a r1:sync r2:sync r1:modify:a r2:add:b r1:modify:a', array('a'=>'a.3 from r1', 'b' => 'b.1 from r2'));
      }
    }
  }
  
}
