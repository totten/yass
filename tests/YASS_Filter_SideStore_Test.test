<?php

/**
 * Test synchronization service
 * 
 * Dependencies:
 * Drupal-SimpleTest 1.x
 */ 

require_once 'YASS/Test.php';

class YASS_Filter_SideStore_Test extends YASS_Test {

    function get_info() {
        return array(
            'name' => t('YASS Filter (SideStore)'),
            'desc' => 'Test the recording of select fields in a secondary datastore',
            'group' => 'YASS',
        );
    }
    
    function setUp() {
        parent::setUp();
        // module_load_include('inc', 'yass');
        require_once 'YASS/Filter/SideStore.php';
        arms_util_include_api('array');
        
        $this->replica = $this->createReplica(array('name' => 'replica', 'datastore' => 'GenericSQL', 'syncstore' => 'GenericSQL', 'is_active' => TRUE));
        $this->sideStore = $this->createReplica(array('name' => 'testsideStore', 'datastore' => 'GenericSQL', 'syncstore' => 'GenericSQL', 'is_active' => TRUE));
        $this->filter = new YASS_Filter_SideStore(array(
            'sideStore' => 'testsideStore',
            'paths' => array(
                '#custom/secSport',
                '#custom/secGender',
                'askew',
            ),
        ));
    }
        
    function testToLocal() {
        $entities = array(
            new YASS_Entity('asdf', 'civicrm_activity', array(
                '#custom' => array(
                    'secSport' => 'Volleyball',
                    'secGender' => 'Women',
                    'otherCustom' => 'other',
                ),
                'source_contact_id' => 900,
                'askew' => 1000,
            )),
        );
        $this->assertEqual('Women', $entities[0]->data['#custom']['secGender']);
        $this->assertEqual('Volleyball', $entities[0]->data['#custom']['secSport']);
        $this->filter->toLocal($entities, $this->replica);
        $this->assertEqual('900', $entities[0]->data['source_contact_id']);
        $this->assertEqual('other', $entities[0]->data['#custom']['otherCustom']);
        $this->assertFalse(isset($entities[0]->data['#custom']['secGender']));
        $this->assertFalse(isset($entities[0]->data['#custom']['secSport']));
        $this->assertFalse(isset($entities[0]->data['askew']));
        
        $sideEntities = $this->sideStore->data->getEntities(arms_util_array_collect($entities, 'entityGuid'));
        $this->assertFalse(isset($sideEntities['asdf']->data['source_contact_id']));
        $this->assertFalse(isset($sideEntities['asdf']->data['#custom']['otherCustom']));
        $this->assertEqual('Women', $sideEntities['asdf']->data['#custom']['secGender']);
        $this->assertEqual('Volleyball', $sideEntities['asdf']->data['#custom']['secSport']);
        $this->assertEqual(1000, $sideEntities['asdf']->data['askew']);
    }
    
    function testToGlobal() {
        $entities = array(
            new YASS_Entity('asdf', 'civicrm_activity', array(
                '#custom' => array(
                    'secGender' => 'this-should-not-exist-and-will-be-ignored',
                    'otherCustom' => 'other',
                ),
                'source_contact_id' => 900,
            )),
        );
        $sideEntities = array(
            new YASS_Entity('asdf', 'civicrm_activity', array(
                '#custom' => array(
                    'secGender' => 'Men',
                    'secSport' => 'Baseball',
                ),
                'askew' => 1000,
            )),
        );
        $this->sideStore->data->putEntities($sideEntities);
        
        $this->assertFalse(isset($entities[0]->data['#custom']['secSport']));
        $this->filter->toGlobal($entities, $this->replica);
        $this->assertEqual('900', $entities[0]->data['source_contact_id']);
        $this->assertEqual('1000', $entities[0]->data['askew']);
        $this->assertEqual('other', $entities[0]->data['#custom']['otherCustom']);
        $this->assertEqual('Men', $entities[0]->data['#custom']['secGender']);
        $this->assertEqual('Baseball', $entities[0]->data['#custom']['secSport']);
    }
}
