<?php

/**
 * Test synchronization service
 * 
 * Dependencies:
 * Drupal-SimpleTest 1.x
 */ 

require_once 'YASS/Test.php';

class YASS_Engine_Test extends YASS_Test {
    function get_info() {
        return array(
            'name' => t('YASS Engine'),
            'desc' => 'Test the high-level engine operations',
            'group' => 'YASS'
        );
    }
    
    function setUp() {
        parent::setUp();
        // module_load_include('inc', 'yass');
        require_once 'YASS/Engine.php';
    }

    function testDestroySingleSQL() {
        $this->_eval('master,r1,r2:init:GenericSQL,GenericSQL *:sync r1:add:a r2:add:b *:sync *:sync r2:modify:a *:sync *:sync');
        $r1 = YASS_Engine::singleton()->getReplicaByName('r1');
        $r2 = YASS_Engine::singleton()->getReplicaByName('r2');
        
        $this->assertEqual(2, db_result(db_query('SELECT count(*) FROM {yass_datastore} WHERE replica_id = %d', $r1->id)));
        $this->assertEqual(2, db_result(db_query('SELECT count(*) FROM {yass_datastore} WHERE replica_id = %d', $r2->id)));
        $this->assertEqual(2, db_result(db_query('SELECT count(*) FROM {yass_syncstore_state} WHERE replica_id = %d', $r1->id)));
        $this->assertEqual(2, db_result(db_query('SELECT count(*) FROM {yass_syncstore_state} WHERE replica_id = %d', $r2->id)));
        $this->assertEqual(3, db_result(db_query('SELECT count(*) FROM {yass_syncstore_seen} WHERE replica_id = %d', $r1->id)));
        $this->assertEqual(3, db_result(db_query('SELECT count(*) FROM {yass_syncstore_seen} WHERE replica_id = %d', $r2->id)));
        
        $this->_eval('r2:destroy');
        
        $this->assertEqual(2, db_result(db_query('SELECT count(*) FROM {yass_datastore} WHERE replica_id = %d', $r1->id)));
        $this->assertEqual(0, db_result(db_query('SELECT count(*) FROM {yass_datastore} WHERE replica_id = %d', $r2->id)));
        $this->assertEqual(2, db_result(db_query('SELECT count(*) FROM {yass_syncstore_state} WHERE replica_id = %d', $r1->id)));
        $this->assertEqual(0, db_result(db_query('SELECT count(*) FROM {yass_syncstore_state} WHERE replica_id = %d', $r2->id)));
        $this->assertEqual(3, db_result(db_query('SELECT count(*) FROM {yass_syncstore_seen} WHERE replica_id = %d', $r1->id)));
        $this->assertEqual(0, db_result(db_query('SELECT count(*) FROM {yass_syncstore_seen} WHERE replica_id = %d', $r2->id)));
    }
    
    function testFlush() {
        $this->_eval('master,rSQL:init:GenericSQL,GenericSQL rMEM:init:Memory,Memory *:sync rSQL:add:a rMEM:add:b *:sync *:sync');
        $rSQL_1 = YASS_Engine::singleton()->getReplicaByName('rSQL');
        $rMEM_1 = YASS_Engine::singleton()->getReplicaByName('rMEM');
        
        $this->assertSyncState($rSQL_1, 'a', $rSQL_1->id, 1, 'a.1 from rSQL');
        $this->assertSyncState($rSQL_1, 'b', $rMEM_1->id, 1, 'b.1 from rMEM');
        $this->assertSyncState($rMEM_1, 'a', $rSQL_1->id, 1, 'a.1 from rSQL');
        $this->assertSyncState($rMEM_1, 'b', $rMEM_1->id, 1, 'b.1 from rMEM');

        $this->_eval('engine:flush');

        $rSQL_2 = YASS_Engine::singleton()->getReplicaByName('rSQL');
        $rMEM_2 = YASS_Engine::singleton()->getReplicaByName('rMEM');
        $this->assertEqual($rSQL_1->id, $rSQL_2->id);
        $this->assertEqual($rMEM_1->id, $rMEM_2->id);
        
        $this->assertSyncState($rSQL_2, 'a', $rSQL_1->id, 1, 'a.1 from rSQL');
        $this->assertSyncState($rSQL_2, 'b', $rMEM_1->id, 1, 'b.1 from rMEM');
        $this->assertSyncState($rMEM_2, 'a', FALSE, FALSE, FALSE, FALSE);
        $this->assertSyncState($rMEM_2, 'b', FALSE, FALSE, FALSE, FALSE);
    }
    
    function testJoin() {
        $master = $this->createReplica(array('name' => 'master', 'datastore' => 'GenericSQL', 'syncstore' => 'GenericSQL', 'is_active' => TRUE));
        $r1 = $this->createReplica(array('name' => 'r1', 'datastore' => 'LocalizedMemory', 'syncstore' => 'LocalizedMemory', 'is_active' => TRUE));
        $r2 = $this->createReplica(array('name' => 'r2', 'datastore' => 'LocalizedMemory', 'syncstore' => 'LocalizedMemory', 'is_active' => TRUE));
        
        $r1->data->nativePut('contact', 'alice');
        $r2->data->nativePut('contact', 'bob');
        
        YASS_Engine::singleton()->join($r1, $master);
        YASS_Engine::singleton()->join($r2, $master);
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        $this->assertAllData(array($master, $r1, $r2), array('alice','bob'));
        
        // r1 gets messed up; synchronization can't clean it up
        $r1->data->nativePut('contact', 'alicia', 1);
        $r1->data->nativePut('contact', 'bobby', 2);
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        $this->assertAllData(array($r1), array('alicia','bobby'));
        $this->assertAllData(array($master, $r2), array('alice','bob'));
        
        // to reach a consistent state, r1 joins again -- creating duplicates
        YASS_Engine::singleton()->join($r1, $master);
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        $this->assertAllData(array($master, $r1, $r2), array('alice','alicia','bob','bobby'));
    }
    
    /**
     * Setup a series of replicas with irresolvably different data
     *
     * $r1 disagrees with $master and $r2
     *
     * @return array(0=>YASS_Replica,1=>YASS_Replica,2=>YASS_Replica) aka array($master,$r1,$r2)
     */
    function _setupDiscrepancy_Simple() {
        $master = $this->createReplica(array('name' => 'master', 'datastore' => 'GenericSQL', 'syncstore' => 'GenericSQL', 'is_active' => TRUE));
        $r1 = $this->createReplica(array('name' => 'r1', 'datastore' => 'LocalizedMemory', 'syncstore' => 'LocalizedMemory', 'is_active' => TRUE));
        $r2 = $this->createReplica(array('name' => 'r2', 'datastore' => 'LocalizedMemory', 'syncstore' => 'LocalizedMemory', 'is_active' => TRUE));
        
        $r1->data->nativePut('contact', 'alice');
        $r2->data->nativePut('contact', 'bob');
        
        YASS_Engine::singleton()->join($r1, $master);
        YASS_Engine::singleton()->join($r2, $master);
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        $this->assertAllData(array($master, $r1, $r2), array('alice','bob'));
        
        // r1 gets messed up; synchronization can't clean it up
        $r1->data->nativePut('contact', 'alicia', 1);
        $r1->data->nativePut('contact', 'bobby', 2);
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        $this->assertAllData(array($r1), array('alicia','bobby'));
        $this->assertAllData(array($master, $r2), array('alice','bob'));
        
        return array($master, $r1, $r2);
    }
    
    function testHardTick_Simple() {
        list ($master, $r1, $r2) = $this->_setupDiscrepancy_Simple();
        YASS_Engine::singleton()->hardTick($r1);
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        $this->assertAllData(array($master, $r1, $r2), array('alicia','bobby'));
    }
    
    function testHardPushToReplica_Simple() {
        list ($master, $r1, $r2) = $this->_setupDiscrepancy_Simple();
        YASS_Engine::singleton()->hardPush($master, $r1);
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        $this->assertAllData(array($master, $r1, $r2), array('alice','bob'));
    }
    
    function testHardPushToMaster_Simple() {
        list ($master, $r1, $r2) = $this->_setupDiscrepancy_Simple();
        YASS_Engine::singleton()->hardPush($r1, $master);
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        $this->assertAllData(array($r1, $master), array('alicia','bobby'));
        $this->assertAllData(array($r2), array('alice','bob'));
    }
    
    function _setupDiscrepancy_Complex() {
        $master = $this->createReplica(array('name' => 'master', 'datastore' => 'GenericSQL', 'syncstore' => 'GenericSQL', 'is_active' => TRUE));
        $r1 = $this->createReplica(array('name' => 'r1', 'datastore' => 'CiviCRM', 'syncstore' => 'CiviCRM', 'is_active' => TRUE));
        $r2 = $this->createReplica(array('name' => 'r2', 'datastore' => 'LocalizedMemory', 'syncstore' => 'LocalizedMemory', 'is_active' => TRUE));
        YASS_Engine::singleton()->join($r1, $master);
        YASS_Engine::singleton()->join($r2, $master);
        
        // add some test data
        $this->updateEntities($r1, array(
            array('guid' => 'alice', 'type' => 'civicrm_contact', 'data' => array('first_name' => 'Alice', '#custom' => array(), '#unknown' => array())),
            array('guid' => 'bob', 'type' => 'civicrm_contact', 'data' => array('first_name' => 'Bob', '#custom' => array(), '#unknown' => array())),
        ));
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        
        // r1 gets messed up; synchronization can't clean it up
        $r1->data->putEntities(array(
            new YASS_Entity('alice', 'civicrm_contact', array('first_name' => 'Alicia', '#custom' => array(), '#unknown' => array())),
        ));
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        $r1Data = $r1->data->getEntities(array('alice'));
        $this->assertEqual('Alicia', $r1Data['alice']->data['first_name']);
        $r2Data = $r2->data->getEntities(array('alice'));
        $this->assertEqual('Alice', $r2Data['alice']->data['first_name']);
        $masterData = $master->data->getEntities(array('alice'));
        $this->assertEqual('Alice', $masterData['alice']->data['first_name']);
        
        return array($master, $r1, $r2);
    }
    
    function testHardTick_Complex() {
        // $r1 disagrees with $master and $r2
        list ($master, $r1, $r2) = $this->_setupDiscrepancy_Complex();
        YASS_Engine::singleton()->hardTick($r1);
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        
        $r1Data = $r1->data->getEntities(array('alice'));
        $this->assertEqual('Alicia', $r1Data['alice']->data['first_name']);
        $r2Data = $r2->data->getEntities(array('alice'));
        $this->assertEqual('Alicia', $r2Data['alice']->data['first_name']);
        $masterData = $master->data->getEntities(array('alice'));
        $this->assertEqual('Alicia', $masterData['alice']->data['first_name']);
    }
    
    function testHardPushToReplica_Complex() {
        // $r1 disagrees with $master and $r2
        list ($master, $r1, $r2) = $this->_setupDiscrepancy_Complex();
        YASS_Engine::singleton()->hardPush($master, $r1);
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        
        $r1Data = $r1->data->getEntities(array('alice'));
        $this->assertEqual('Alice', $r1Data['alice']->data['first_name']);
        $r2Data = $r2->data->getEntities(array('alice'));
        $this->assertEqual('Alice', $r2Data['alice']->data['first_name']);
        $masterData = $master->data->getEntities(array('alice'));
        $this->assertEqual('Alice', $masterData['alice']->data['first_name']);
    }
    
    function testHardPushToMaster_Complex() {
        // $r1 disagrees with $master and $r2
        list ($master, $r1, $r2) = $this->_setupDiscrepancy_Complex();
        YASS_Engine::singleton()->hardPush($r1, $master);
        YASS_Engine::singleton()->syncAll($master, new YASS_ConflictResolver_Exception());
        
        $r1Data = $r1->data->getEntities(array('alice'));
        $this->assertEqual('Alicia', $r1Data['alice']->data['first_name']);
        $r2Data = $r2->data->getEntities(array('alice'));
        $this->assertEqual('Alice', $r2Data['alice']->data['first_name']);
        $masterData = $master->data->getEntities(array('alice'));
        $this->assertEqual('Alicia', $masterData['alice']->data['first_name']);
    }
    
    function testRestore() {
        // List of different test cases
        $cases = array();
        
        $cases[] = '
                // Restore to the previous version
                master,r1,r2:init
                
                r1:add:e1 r1:auth:e1:r2 engine:syncAll *:has:e1
                r1:stash:e1:e1.0 
                
                r1:modify:e1 engine:syncAll *:has:e1
                r1:stash:e1:e1.1
                
                master:restore:e1:e1.0 engine:syncAll *:has:e1
                *:checkStash:e1:e1.0 
                *:checkNotStash:e1:e1.1
        ';

        $cases[] = '
                // Restore a recent version on top of a recently deleted entity
                master,r1,r2:init
                
                r1:add:e1 r1:auth:e1:r2 engine:syncAll *:has:e1
                r1:stash:e1:e1.0 
                
                r1:modify:e1 engine:syncAll *:has:e1
                r1:stash:e1:e1.1
                
                r1:del:e1 engine:syncAll *:hasNot:e1
                
                master:restore:e1:e1.1
                engine:syncAll *:has:e1
                *:checkNotStash:e1:e1.0
                *:checkStash:e1:e1.1
        ';

        $cases[] = '
                // Restore an old version on top of a recently deleted entity
                master,r1,r2:init
                
                r1:add:e1 r1:auth:e1:r2 engine:syncAll *:has:e1
                r1:stash:e1:e1.0 
                
                r1:modify:e1 engine:syncAll *:has:e1
                r1:stash:e1:e1.1
                
                r1:del:e1 engine:syncAll *:hasNot:e1
                
                master:restore:e1:e1.0
                engine:syncAll *:has:e1
                *:checkStash:e1:e1.0
                *:checkNotStash:e1:e1.1
        ';
        
        // Setup and execute each test case
        require_once 'YASS/Test/ArchiveEntityEvaluator.php';
        $this->setEvaluatorTemplate(new YASS_Test_ArchiveEntityEvaluator($this));
        $this->setReplicaDefaults(array(
            'datastore' => 'LocalizedMemory',
            'syncstore' => 'LocalizedMemory',
            'is_active' => TRUE,
        ));
        foreach ($cases as $case) {
            // We don't benefit from setUp(); do it manually
            YASS_Engine::singleton()->destroyReplicas();
            YASS_Context::push(array(
                'testCase' => $case,
            ));
            $this->_eval($case);
            YASS_Context::pop();
        }
    }
    
}
